package component

import (
  fs "github.com/codekoala/network-shaper/view/component/floatslider"
)

templ RateLimitSettings() {
  <div class="bg-base-300 my-5 p-3 rounded-xl" x-data="{ enabled: true, reorder: true }">
    <div class="form-control">
      <label class="label cursor-pointer">
        <span class="label-text text-lg font-bold">Rate Limit</span>
        <input type="checkbox" class="toggle toggle-primary" x-model="enabled" />
      </label>
    </div>

    <div>
      Delay packets based on packet size.
    </div>

    <section x-show="enabled" x-transition>
      <div role="alert" class="alert alert-warning my-5 w-9/12 mx-auto">
        <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" /></svg>

        Rate throttling is limited by several factors. The kernel clock
        granularity avoids a perfect shaping at a specific level. This will show
        up in an artificial packet compression (bursts). Network adapter buffers
        can also add artificial delay.
      </div>

      @fs.FloatSlider(fs.With(
        fs.Label("Rate"),
        fs.Descr("Maximum bitrate in kilobits per second."),
        fs.Unit("kb/s"),
        fs.Max(1000000.0),
        fs.Step(1.0),
      ))

      @fs.FloatSlider(fs.With(
        fs.Label("Packet Overhead"),
        fs.Descr(`Per packet overhead and can be negative. A positive
        value can be used to simulate additional link layer headers. A negative
        value can be used to artificial strip the Ethernet header (e.g. -14)
        and/or simulate a link layer header compression scheme.`),
        fs.Unit("bytes"),
        fs.Min(-1000.0),
        fs.Max(1000.0),
        fs.Step(1.0),
        fs.Optional(true),
      ))

      @fs.FloatSlider(fs.With(
        fs.Label("Cell size"),
        fs.Descr(`Can be used to simulate link layer schemes. ATM, for
        example, has an payload cell size of 48 bytes and 5 byte per cell
        header. If a packet is 50 bytes then ATM must use two cells: 2 * 48
        bytes payload including 2 * 5 byte header, thus consume 106 byte on the
        wire.`),
        fs.Unit("bytes"),
        fs.Max(1000.0),
        fs.Step(1.0),
        fs.Optional(true),
      ))

      @fs.FloatSlider(fs.With(
        fs.Label("Cell overhead"),
        fs.Descr(`Can be used to specify per cell overhead--5 for our
        ATM example. Cell overhead can be negative, but use negative values
        with caution.`),
        fs.Unit("bytes"),
        fs.Min(-100.0),
        fs.Max(100.0),
        fs.Step(1.0),
        fs.Optional(true),
      ))
    </section>
  </div>
}
