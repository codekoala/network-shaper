// Code generated by go generate; DO NOT EDIT.
package floatslider

import "strconv"

func Label(in string) Opt {
	return func(opts *FloatSliderOpts) {
		opts.Label = in
	}
}

func Descr(in string) Opt {
	return func(opts *FloatSliderOpts) {
		opts.Descr = in
	}
}

func Unit(in string) Opt {
	return func(opts *FloatSliderOpts) {
		opts.Unit = in
	}
}

func Optional(in bool) Opt {
	return func(opts *FloatSliderOpts) {
		opts.Optional = in
	}
}

func Disabled(in bool) Opt {
	return func(opts *FloatSliderOpts) {
		opts.Disabled = in
	}
}

func Min(in float64) Opt {
	return func(opts *FloatSliderOpts) {
		opts.Min = in
	}
}

func (o *FloatSliderOpts) MinStr() string {
	return strconv.FormatFloat(o.Min, 'f', 1, 64)
}

func Max(in float64) Opt {
	return func(opts *FloatSliderOpts) {
		opts.Max = in
	}
}

func (o *FloatSliderOpts) MaxStr() string {
	return strconv.FormatFloat(o.Max, 'f', 1, 64)
}

func Step(in float64) Opt {
	return func(opts *FloatSliderOpts) {
		opts.Step = in
	}
}

func (o *FloatSliderOpts) StepStr() string {
	return strconv.FormatFloat(o.Step, 'f', 1, 64)
}

func Value(in float64) Opt {
	return func(opts *FloatSliderOpts) {
		opts.Value = in
	}
}

func (o *FloatSliderOpts) ValueStr() string {
	return strconv.FormatFloat(o.Value, 'f', 1, 64)
}

type Opt func(*FloatSliderOpts)

func With(opts ...Opt) *FloatSliderOpts {
	out := &FloatSliderOpts{Unit: "ms", Min: 0.0, Max: 100.0, Step: 0.1}
	out.With(opts...)
	return out
}

func (o *FloatSliderOpts) With(opts ...Opt) *FloatSliderOpts {
	for _, opt := range opts {
		opt(o)
	}
	return o
}

